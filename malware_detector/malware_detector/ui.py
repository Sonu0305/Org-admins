import tkinter as tk
from tkinter import filedialog, ttk, scrolledtext, messagebox
import os
import json
import sys

class MalwareDetectorUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ThreatShield Malware Detection System")
        self.root.geometry("960x720")
        self.root.minsize(800, 600)
        self.root.resizable(True, True)
        
        # Set theme colors for cybersecurity feel
        self.bg_color = "#1E1E2E"  # Dark background
        self.text_color = "#00FF00"  # Matrix green for text
        self.highlight_color = "#FF0000"  # Red for warnings/highlights
        self.button_bg = "#333340"  # Slightly lighter background for buttons
        self.accent_color = "#007BFF"  # Blue accent for selected items
        self.secondary_accent = "#0064CC"  # Secondary accent for hover states
        
        # Configure the root window background
        self.root.configure(bg=self.bg_color)
        
        # Configure styles with cybersecurity theme
        self.style = ttk.Style()
        self.style.theme_use('clam')  # Use clam as base theme for better customization
        
        # Configure button style
        self.style.configure("Cyber.TButton", 
                            background=self.button_bg,
                            foreground=self.text_color,
                            borderwidth=2,
                            relief="raised",
                            font=('Consolas', 11, 'bold'),
                            padding=10)
        
        self.style.map("Cyber.TButton",
                     background=[('active', self.accent_color), ('pressed', self.secondary_accent)],
                     foreground=[('active', "#FFFFFF"), ('pressed', "#F0F0F0")])
        
        # Configure label style
        self.style.configure("Cyber.TLabel", 
                           background=self.bg_color,
                           foreground=self.text_color,
                           font=('Consolas', 11))
        
        # Configure frame style
        self.style.configure("Cyber.TFrame", 
                           background=self.bg_color)
        
        # Configure labelframe style
        self.style.configure("Cyber.TLabelframe", 
                           background=self.bg_color,
                           foreground=self.text_color)
        
        self.style.configure("Cyber.TLabelframe.Label",
                           background=self.bg_color,
                           foreground=self.accent_color,
                           font=('Consolas', 12, 'bold'))
        
        # Configure progress bar style
        self.style.configure("Cyber.Horizontal.TProgressbar",
                           background=self.accent_color,
                           troughcolor="#000000",
                           borderwidth=0)
                            
        # Main container frame with proper padding
        self.container = ttk.Frame(self.root, style="Cyber.TFrame", padding="15")
        self.container.pack(fill=tk.BOTH, expand=True)
        
        # Header frame with logo and title
        self.header_frame = ttk.Frame(self.container, style="Cyber.TFrame")
        self.header_frame.pack(fill=tk.X, padx=5, pady=(5, 15))
        
        # Create a more professional header with logo
        self.logo_text = """
  /=======\\
 /         \\
| ThreatShield |
 \\         /
  \\=======/
        """
        
        # Logo frame for better alignment
        self.logo_frame = ttk.Frame(self.header_frame, style="Cyber.TFrame")
        self.logo_frame.pack(side=tk.LEFT, anchor=tk.W)
        
        # Logo with better styling
        self.logo_label = tk.Label(self.logo_frame, 
                                  text=self.logo_text,
                                  font=('Courier', 12, 'bold'),
                                  bg=self.bg_color,
                                  fg=self.accent_color,
                                  justify=tk.LEFT)
        self.logo_label.pack(side=tk.LEFT)
        
        # Title with better styling
        self.title_label = tk.Label(self.header_frame,
                                   text="ThreatShield MALWARE DETECTION SYSTEM",
                                   font=('Consolas', 16, 'bold'),
                                   bg=self.bg_color,
                                   fg=self.text_color)
        self.title_label.pack(side=tk.RIGHT, padx=20)
        
        # Control panel frame that contains all controls
        self.control_panel = ttk.LabelFrame(self.container, 
                                          text="CONTROL PANEL", 
                                          style="Cyber.TLabelframe", 
                                          padding="15")
        self.control_panel.pack(fill=tk.X, padx=5, pady=10, ipady=5)
        
        # Grid layout for better organization of controls
        self.control_panel.columnconfigure(0, weight=1)
        self.control_panel.columnconfigure(1, weight=1)
        self.control_panel.columnconfigure(2, weight=1)
        
        # File selection frame with improved visuals
        self.file_frame = ttk.Frame(self.control_panel, style="Cyber.TFrame")
        self.file_frame.grid(row=0, column=0, columnspan=3, sticky=tk.EW, pady=(0, 10))
        
        # File selection controls
        self.file_label_prefix = ttk.Label(self.file_frame, 
                                         text="TARGET FILE:",
                                         style="Cyber.TLabel",
                                         font=('Consolas', 11, 'bold'))
        self.file_label_prefix.pack(side=tk.LEFT, padx=(0, 5))
        
        # File path display with better contrast
        self.file_path_frame = ttk.Frame(self.file_frame, style="Cyber.TFrame")
        self.file_path_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        self.file_label = ttk.Label(self.file_path_frame, 
                                   text="[NO FILE SELECTED]",
                                   foreground=self.highlight_color,
                                   background="#000000",
                                   font=('Consolas', 11),
                                   anchor=tk.W,
                                   padding=(5, 3))
        self.file_label.pack(fill=tk.X, expand=True)
        
        # Button with improved visibility
        self.browse_button = ttk.Button(self.file_frame, 
                                       text="SELECT TARGET", 
                                       command=self.browse_file,
                                       style="Cyber.TButton")
        self.browse_button.pack(side=tk.RIGHT)
        
        # Action buttons organized in a row
        self.action_frame = ttk.Frame(self.control_panel, style="Cyber.TFrame")
        self.action_frame.grid(row=1, column=0, columnspan=3, sticky=tk.EW, pady=10)
        
        # Center-align the action buttons
        self.action_frame.columnconfigure(0, weight=1)  # Left margin
        self.action_frame.columnconfigure(4, weight=1)  # Right margin
        
        # Scan button with priority highlighting
        self.upload_button = ttk.Button(self.action_frame, 
                                       text="INITIATE SCAN", 
                                       command=self.analyze_file, 
                                       state='disabled',
                                       style="Cyber.TButton")
        self.upload_button.grid(row=0, column=1, padx=10)
        
        # Clear button
        self.clear_button = ttk.Button(self.action_frame, 
                                      text="CLEAR REPORT", 
                                      command=self.clear_report,
                                      style="Cyber.TButton")
        self.clear_button.grid(row=0, column=2, padx=10)
        
        # Save report button
        self.save_button = ttk.Button(self.action_frame, 
                                     text="SAVE REPORT", 
                                     command=self.save_report,
                                     style="Cyber.TButton")
        self.save_button.grid(row=0, column=3, padx=10)
        
        # Progress bar with improved visual feedback
        self.progress_frame = ttk.Frame(self.control_panel, style="Cyber.TFrame")
        self.progress_frame.grid(row=2, column=0, columnspan=3, sticky=tk.EW, pady=(5, 0))
        
        self.progress_var = tk.DoubleVar()
        self.progress = ttk.Progressbar(self.progress_frame, 
                                       orient=tk.HORIZONTAL, 
                                       length=100, 
                                       mode='indeterminate',
                                       variable=self.progress_var,
                                       style="Cyber.Horizontal.TProgressbar")
        self.progress.pack(fill=tk.X, padx=5, pady=5)
        
        # Report display with cybersecurity styling
        self.report_frame = ttk.LabelFrame(self.container, 
                                          text="SECURITY ANALYSIS REPORT", 
                                          padding=15,
                                          style="Cyber.TLabelframe")
        self.report_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=10)
        
        # Custom colors for the report text with better contrast and readability
        self.report_text = scrolledtext.ScrolledText(
            self.report_frame, 
            wrap=tk.WORD, 
            font=('Consolas', 10),
            bg="#000000",  # Black background
            fg="#33FF33",  # Bright green text
            insertbackground="#33FF33",  # Green cursor
            borderwidth=0,
            padx=10,
            pady=10
        )
        self.report_text.pack(fill=tk.BOTH, expand=True)
        
        # Status bar with system messages
        self.status_frame = ttk.Frame(self.container, style="Cyber.TFrame")
        self.status_frame.pack(fill=tk.X, padx=5, pady=(10, 5))
        
        self.status_var = tk.StringVar()
        self.status_var.set("SYSTEM READY | Waiting for file selection...")
        
        self.status_prefix = ttk.Label(self.status_frame, 
                                     text="STATUS:",
                                     style="Cyber.TLabel",
                                     font=('Consolas', 10, 'bold'))
        self.status_prefix.pack(side=tk.LEFT, padx=(0, 5))
        
        self.status_bar = ttk.Label(self.status_frame, 
                                   textvariable=self.status_var,
                                   style="Cyber.TLabel",
                                   font=('Consolas', 10),
                                   anchor=tk.W)
        self.status_bar.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Quit button aligned to the right side
        self.quit_button = ttk.Button(self.status_frame, 
                                     text="EXIT SYSTEM", 
                                     command=self.quit,
                                     style="Cyber.TButton")
        self.quit_button.pack(side=tk.RIGHT)
        
        # Add initial text with better formatting
        self.report_text.insert(tk.END, 
                              "ThreatShield Malware Detection System v2.5\n" +
                              "=" * 60 + "\n\n" +
                              "SYSTEM INITIALIZED\n\n" +
                              "Select a file to begin analysis...\n\n" +
                              "This system will scan for:\n" +
                              "  • Executable threats\n" +
                              "  • Obfuscated malicious code\n" +
                              "  • Known signature patterns\n" +
                              "  • Suspicious behaviors\n" +
                              "  • Network communication exploits\n\n" +
                              "WAITING FOR USER INPUT...\n")
        
        self.file_path = None
        
        # Start blinking prompt effect
        self.blink_prompt()
    
    def blink_prompt(self):
        """Creates a blinking cursor effect in the status bar"""
        current_text = self.status_var.get()
        if current_text.endswith("_"):
            self.status_var.set(current_text[:-1] + " ")
        else:
            self.status_var.set(current_text.rstrip() + "_")
        self.root.after(500, self.blink_prompt)
    
    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="Select Target File for Malware Analysis",
            filetypes=(
                ("Executable files", "*.exe"),
                ("DLL files", "*.dll"),
                ("Script files", "*.js;*.vbs;*.ps1"),
                ("Document files", "*.doc;*.docx;*.pdf"),
                ("All files", "*.*")
            )
        )
        if file_path:
            self.file_path = file_path
            self.file_label.config(text=os.path.basename(file_path))
            self.upload_button.config(state='normal')
            self.status_var.set(f"TARGET ACQUIRED: {os.path.basename(file_path)} | Ready to scan")
    
    def analyze_file(self):
        if not self.file_path:
            return
            
        self.report_text.delete(1.0, tk.END)
        self.report_text.insert(tk.END, "INITIATING MALWARE SCAN...\n\n")
        self.report_text.insert(tk.END, f"TARGET: {self.file_path}\n")
        self.report_text.insert(tk.END, f"TIMESTAMP: {self.get_timestamp()}\n\n")
        self.report_text.insert(tk.END, "ANALYZING FILE STRUCTURE...\n")
        self.report_text.see(tk.END)
        
        self.status_var.set("SCAN IN PROGRESS - PLEASE WAIT")
        self.root.config(cursor="wait")
        self.upload_button.config(state='disabled')
        self.browse_button.config(state='disabled')
        
        # Start progress bar
        self.progress.start(10)
        self.root.update()
        
        try:
            # Simulate stages of analysis with updates
            self.root.after(1000, lambda: self.update_analysis_progress("Checking file signatures..."))
            self.root.after(2000, lambda: self.update_analysis_progress("Analyzing code patterns..."))
            self.root.after(3000, lambda: self.update_analysis_progress("Scanning for known threats..."))
            
            # Perform actual analysis after visual feedback
            self.root.after(4000, self.perform_analysis)
            
        except Exception as e:
            self.progress.stop()
            self.report_text.insert(tk.END, f"\n[ERROR] Analysis failed: {str(e)}\n")
            self.report_text.insert(tk.END, "\nSCAN TERMINATED WITH ERRORS\n")
            self.status_var.set("ERROR - Scan failed")
            self.root.config(cursor="")
            self.upload_button.config(state='normal')
            self.browse_button.config(state='normal')
    
    def update_analysis_progress(self, message):
        """Updates the analysis progress in the report window"""
        self.report_text.insert(tk.END, f"{message}\n")
        self.report_text.see(tk.END)
    
    def perform_analysis(self):
        """Performs the actual file analysis after visual feedback"""
        try:
            # Import here to avoid circular imports
            from malware_detector.malware_detect import analyze_file_for_malware_with_human_report
            
            json_report, human_report = analyze_file_for_malware_with_human_report(self.file_path)
            
            # Stop progress animation
            self.progress.stop()
            
            # Insert a divider
            self.report_text.insert(tk.END, "\n" + "=" * 60 + "\n\n")
            
            # Display scan results header with appropriate coloring
            threat_detected = "HIGH" in human_report or "CRITICAL" in human_report
            
            if threat_detected:
                self.report_text.insert(tk.END, "‼️ THREAT DETECTED ‼️\n\n", "threat_tag")
                self.report_text.tag_configure("threat_tag", foreground="#FF0000", font=('Consolas', 12, 'bold'))
                self.status_var.set("⚠️ THREAT DETECTED - Review the analysis report")
            else:
                self.report_text.insert(tk.END, "✓ FILE APPEARS SAFE ✓\n\n", "safe_tag")
                self.report_text.tag_configure("safe_tag", foreground="#00FF00", font=('Consolas', 12, 'bold'))
                self.status_var.set("SCAN COMPLETE - No major threats detected")
            
            # Display human-readable report
            self.report_text.insert(tk.END, "ANALYSIS SUMMARY\n", "header_tag")
            self.report_text.tag_configure("header_tag", foreground="#FFFFFF", font=('Consolas', 11, 'bold'))
            self.report_text.insert(tk.END, "-" * 60 + "\n\n")
            self.report_text.insert(tk.END, human_report)
            
            # Add JSON report in a formatted way
            self.report_text.insert(tk.END, "\n\nDETAILED TECHNICAL REPORT\n", "header_tag")
            self.report_text.insert(tk.END, "-" * 60 + "\n\n")
            
            # Format the JSON with syntax highlighting
            formatted_json = json.dumps(json_report, indent=2)
            self.report_text.insert(tk.END, formatted_json)
            
            # Apply basic highlighting for JSON
            self.highlight_json()
            
            # Add scan completion message
            self.report_text.insert(tk.END, "\n\n" + "=" * 60 + "\n")
            self.report_text.insert(tk.END, "SCAN COMPLETED SUCCESSFULLY\n")
            self.report_text.see("1.0")  # Scroll to top
            
        except Exception as e:
            self.report_text.insert(tk.END, f"\n[ERROR] Analysis failed: {str(e)}\n")
            self.status_var.set("ERROR - Analysis failed")
        
        finally:
            self.progress.stop()
            self.root.config(cursor="")
            self.upload_button.config(state='normal')
            self.browse_button.config(state='normal')
    
    def highlight_json(self):
        """Apply enhanced syntax highlighting to JSON content"""
        # Configure tags for JSON elements
        self.report_text.tag_configure("json_key", foreground="#3399FF")
        self.report_text.tag_configure("json_string", foreground="#FF9900")
        self.report_text.tag_configure("json_number", foreground="#FFFF33")
        self.report_text.tag_configure("json_bool", foreground="#FF00FF")
        
        # Start from the technical report section
        start_idx = self.report_text.search("DETAILED TECHNICAL REPORT", "1.0", tk.END)
        if not start_idx:
            return
            
        # Find all keys (simplified approach)
        pos = start_idx
        while True:
            key_start = self.report_text.search('"', pos, tk.END)
            if not key_start:
                break
            
            key_end = self.report_text.search('": ', key_start, f"{key_start}+100c")
            if not key_end:
                key_end = self.report_text.search('":', key_start, f"{key_start}+100c")
                if not key_end:
                    pos = f"{key_start}+1c"
                    continue
            
            # Apply tag to the key
            self.report_text.tag_add("json_key", key_start, f"{key_end}+1c")
            
            # Look for string values
            str_start = self.report_text.search('"', f"{key_end}+2c", f"{key_end}+100c")
            if str_start:
                str_end = self.report_text.search('"', f"{str_start}+1c", f"{str_start}+500c")
                if str_end:
                    self.report_text.tag_add("json_string", str_start, f"{str_end}+1c")
            
            # Look for boolean values
            for bool_val in ["true", "false"]:
                bool_start = self.report_text.search(bool_val, f"{key_end}+2c", f"{key_end}+20c")
                if bool_start:
                    self.report_text.tag_add("json_bool", bool_start, f"{bool_start}+{len(bool_val)}c")
            
            # Look for numeric values (simplified)
            num_start = self.report_text.search(r'[0-9]', f"{key_end}+2c", f"{key_end}+20c", regexp=True)
            if num_start:
                # This is a simplified approach - a more robust one would use regex
                num_end = self.report_text.search(r'[^0-9.]', f"{num_start}+1c", f"{num_start}+20c", regexp=True)
                if num_end:
                    self.report_text.tag_add("json_number", num_start, num_end)
            
            pos = f"{key_end}+2c"
    
    def clear_report(self):
        """Clear the report text area"""
        self.report_text.delete(1.0, tk.END)
        self.report_text.insert(tk.END, 
                              "ThreatShield Malware Detection System v2.5\n" +
                              "=" * 60 + "\n\n" +
                              "REPORT CLEARED\n\n" +
                              "Select a file to begin a new analysis...\n")
        self.status_var.set("SYSTEM READY | Report cleared")
    
    def save_report(self):
        """Save the current report to a file"""
        if not self.report_text.get(1.0, tk.END).strip():
            return
            
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=(
                ("Text files", "*.txt"),
                ("HTML Report", "*.html"),
                ("All files", "*.*")
            ),
            title="Save Malware Analysis Report"
        )
        
        if file_path:
            try:
                # Use utf-8 encoding instead of default encoding
                with open(file_path, "w", encoding="utf-8") as f:
                    # If HTML format, add some basic formatting
                    if file_path.endswith('.html'):
                        f.write(self.generate_html_report())
                    else:
                        f.write(self.report_text.get(1.0, tk.END))
                        
                self.status_var.set(f"Report saved to: {os.path.basename(file_path)}")
                
                # Show success message
                messagebox.showinfo("Save Successful", 
                                f"Report successfully saved to:\n{file_path}")
            except Exception as e:
                self.status_var.set(f"Error saving report: {str(e)}")
                messagebox.showerror("Save Error", f"Failed to save report: {str(e)}")
    
    def generate_html_report(self):
        """Generate an HTML formatted version of the report"""
        report_content = self.report_text.get(1.0, tk.END)
        
        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>ThreatShield Malware Analysis Report</title>
    <style>
        body {{
            background-color: #1E1E2E;
            color: #33FF33;
            font-family: 'Consolas', monospace;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 900px;
            margin: 0 auto;
            background-color: #000000;
            padding: 20px;
            border: 1px solid #333340;
            border-radius: 5px;
        }}
        .header {{
            text-align: center;
            margin-bottom: 20px;
            color: #007BFF;
        }}
        .divider {{
            border-top: 1px solid #333340;
            margin: 15px 0;
        }}
        .threat {{
            color: #FF0000;
            font-weight: bold;
            font-size: 1.2em;
        }}
        .safe {{
            color: #00FF00;
            font-weight: bold;
            font-size: 1.2em;
        }}
        .section-header {{
            color: #FFFFFF;
            font-weight: bold;
            margin-top: 15px;
            margin-bottom: 5px;
        }}
        pre {{
            white-space: pre-wrap;
            overflow-x: auto;
            background-color: #0F0F1A;
            padding: 10px;
            border-radius: 3px;
        }}
        .timestamp {{
            color: #999999;
            font-style: italic;
            margin-bottom: 15px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ThreatShield Malware Analysis Report</h1>
            <p class="timestamp">Generated: {self.get_timestamp()}</p>
        </div>
"""
        
        # Convert plain text to HTML with basic formatting
        content_html = report_content.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        
        # Apply basic formatting for sections
        content_html = content_html.replace("ANALYSIS SUMMARY", '<div class="section-header">ANALYSIS SUMMARY</div>')
        content_html = content_html.replace("DETAILED TECHNICAL REPORT", '<div class="section-header">DETAILED TECHNICAL REPORT</div>')
        
        # Format threat detection
        if "THREAT DETECTED" in content_html:
            content_html = content_html.replace("‼️ THREAT DETECTED ‼️", '<div class="threat">‼️ THREAT DETECTED ‼️</div>')
        else:
            content_html = content_html.replace("✓ FILE APPEARS SAFE ✓", '<div class="safe">✓ FILE APPEARS SAFE ✓</div>')
        
        # Format dividers
        content_html = content_html.replace("=" * 60, '<div class="divider"></div>')
        content_html = content_html.replace("-" * 60, '<div class="divider"></div>')
        
        # Wrap the content in pre tags for monospaced formatting
        html += f"<pre>{content_html}</pre>\n"
        html += """    </div>
</body>
</html>"""
        
        return html
    
    def get_timestamp(self):
        """Return a formatted timestamp for the report"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def quit(self):
        """Exit the application"""
        # Add a confirmation dialog
        if messagebox.askyesno("Exit ThreatShield", "Are you sure you want to exit?"):
            self.root.destroy()
            sys.exit(0)

def main():
    root = tk.Tk()
    app = MalwareDetectorUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()